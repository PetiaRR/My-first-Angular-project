{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  get isLogged() {\n    return !!this.user;\n  }\n  constructor(http) {\n    this.http = http;\n    this.user$$ = new BehaviorSubject(undefined);\n    this.user$ = this.user$$.asObservable();\n    this.USER_KEY = '[user]';\n    this.apiUrl = 'http://localhost:3000';\n    this.userSubscription = this.user$.subscribe(user => {\n      try {\n        const lsUser = localStorage.getItem(this.USER_KEY) || '';\n        this.user = JSON.parse(lsUser);\n      } catch (error) {\n        this.user = undefined;\n      }\n      //this.user = user;\n    });\n  }\n\n  register(username, email, password, rePassword) {\n    //const api = `http://localhost:3000`\n    return this.http.post(`${this.apiUrl}/auth/register`, {\n      username,\n      email,\n      password,\n      rePassword\n    }).pipe(tap(user => this.user$$.next(user)));\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/register`, {\n      username,\n      password\n    }).pipe(tap(user => this.user$$.next(user)));\n  }\n  logout() {\n    return this.http.post(`${this.apiUrl}/logout`, {}).pipe(tap(() => this.user$$.next(undefined)));\n  }\n  ngOnDestroy() {\n    this.userSubscription.unsubscribe();\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","tap","UserService","isLogged","user","constructor","http","user$$","undefined","user$","asObservable","USER_KEY","apiUrl","userSubscription","subscribe","lsUser","localStorage","getItem","JSON","parse","error","register","username","email","password","rePassword","post","pipe","next","login","logout","ngOnDestroy","unsubscribe","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\PetiaRR\\Desktop\\Angular\\exam-project\\My-first-Angular-project\\src\\app\\user\\user.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { UserForAuth } from '../types/user';\nimport { BehaviorSubject, Subscription, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService implements OnDestroy {\n\n  private user$$ = new BehaviorSubject<UserForAuth | undefined>(undefined);\n  private user$ = this.user$$.asObservable();\n\n  user: UserForAuth | undefined;\n  USER_KEY = '[user]';\n\n  userSubscription: Subscription;\n\n  get isLogged(): boolean {\n    return !!this.user;\n  }\n  private apiUrl = 'http://localhost:3000'\n  constructor(private http: HttpClient) {this.userSubscription = this.user$.subscribe((user) => {\n    try {\n      const lsUser = localStorage.getItem(this.USER_KEY) || '';\n      this.user = JSON.parse(lsUser);\n    } catch (error) {\n      this.user = undefined;\n    }\n    //this.user = user;\n  });\n}\n\n  register(\n    username: string,\n    email: string,\n    password: string,\n    rePassword: string\n  ) {\n    \n    //const api = `http://localhost:3000`\n    return this.http\n      .post<UserForAuth>(`${this.apiUrl}/auth/register`, {\n        username,\n        email,\n        password,\n        rePassword\n      })\n      .pipe(tap((user) => this.user$$.next(user)));\n\n     \n  }\n\n  login (username: string, password: string) {\n    return this.http\n    .post<UserForAuth>(`${this.apiUrl}/register`, {\n      username,\n      password,\n      \n    })\n    .pipe(tap((user) => this.user$$.next(user)));\n  }\n  logout() {\n    return this.http\n      .post(`${this.apiUrl}/logout`, {})\n      .pipe(tap(() => this.user$$.next(undefined)));\n  }\n\n  ngOnDestroy(): void {\n    this.userSubscription.unsubscribe();\n  }\n}\n"],"mappings":"AAGA,SAASA,eAAe,EAAgBC,GAAG,QAAQ,MAAM;;;AAKzD,OAAM,MAAOC,WAAW;EAUtB,IAAIC,QAAQA,CAAA;IACV,OAAO,CAAC,CAAC,IAAI,CAACC,IAAI;EACpB;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAZhB,KAAAC,MAAM,GAAG,IAAIP,eAAe,CAA0BQ,SAAS,CAAC;IAChE,KAAAC,KAAK,GAAG,IAAI,CAACF,MAAM,CAACG,YAAY,EAAE;IAG1C,KAAAC,QAAQ,GAAG,QAAQ;IAOX,KAAAC,MAAM,GAAG,uBAAuB;IACD,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACJ,KAAK,CAACK,SAAS,CAAEV,IAAI,IAAI;MAC3F,IAAI;QACF,MAAMW,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACN,QAAQ,CAAC,IAAI,EAAE;QACxD,IAAI,CAACP,IAAI,GAAGc,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC;OAC/B,CAAC,OAAOK,KAAK,EAAE;QACd,IAAI,CAAChB,IAAI,GAAGI,SAAS;;MAEvB;IACF,CAAC,CAAC;EACJ;;EAEEa,QAAQA,CACNC,QAAgB,EAChBC,KAAa,EACbC,QAAgB,EAChBC,UAAkB;IAGlB;IACA,OAAO,IAAI,CAACnB,IAAI,CACboB,IAAI,CAAc,GAAG,IAAI,CAACd,MAAM,gBAAgB,EAAE;MACjDU,QAAQ;MACRC,KAAK;MACLC,QAAQ;MACRC;KACD,CAAC,CACDE,IAAI,CAAC1B,GAAG,CAAEG,IAAI,IAAK,IAAI,CAACG,MAAM,CAACqB,IAAI,CAACxB,IAAI,CAAC,CAAC,CAAC;EAGhD;EAEAyB,KAAKA,CAAEP,QAAgB,EAAEE,QAAgB;IACvC,OAAO,IAAI,CAAClB,IAAI,CACfoB,IAAI,CAAc,GAAG,IAAI,CAACd,MAAM,WAAW,EAAE;MAC5CU,QAAQ;MACRE;KAED,CAAC,CACDG,IAAI,CAAC1B,GAAG,CAAEG,IAAI,IAAK,IAAI,CAACG,MAAM,CAACqB,IAAI,CAACxB,IAAI,CAAC,CAAC,CAAC;EAC9C;EACA0B,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACxB,IAAI,CACboB,IAAI,CAAC,GAAG,IAAI,CAACd,MAAM,SAAS,EAAE,EAAE,CAAC,CACjCe,IAAI,CAAC1B,GAAG,CAAC,MAAM,IAAI,CAACM,MAAM,CAACqB,IAAI,CAACpB,SAAS,CAAC,CAAC,CAAC;EACjD;EAEAuB,WAAWA,CAAA;IACT,IAAI,CAAClB,gBAAgB,CAACmB,WAAW,EAAE;EACrC;EAAC,QAAAC,CAAA,G;qBA9DU/B,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpC,WAAW;IAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}