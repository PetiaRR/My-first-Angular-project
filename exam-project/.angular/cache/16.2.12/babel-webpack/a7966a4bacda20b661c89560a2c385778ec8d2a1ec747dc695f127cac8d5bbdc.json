{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  get isLogged() {\n    return !!this.user;\n  }\n  constructor(http) {\n    this.http = http;\n    this.user$$ = new BehaviorSubject(undefined);\n    this.user$ = this.user$$.asObservable();\n    this.USER_KEY = '[user]';\n    this.apiUrl = 'http://localhost:3030';\n  }\n  register(username, email, password, rePassword) {\n    //debugger\n    //const api = `http://localhost:3000`\n    return this.http.post(`${this.apiUrl}/users/register`, {\n      username,\n      email,\n      password\n    });\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/users/register`, {\n      username,\n      password\n    });\n  }\n  logout() {\n    return this.http.post(`${this.apiUrl}/users/logout`, {});\n  }\n  ngOnDestroy() {\n    this.userSubscription.unsubscribe();\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","UserService","isLogged","user","constructor","http","user$$","undefined","user$","asObservable","USER_KEY","apiUrl","register","username","email","password","rePassword","post","login","logout","ngOnDestroy","userSubscription","unsubscribe","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\PetiaRR\\Desktop\\Angular\\exam-project\\My-first-Angular-project\\src\\app\\user\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { UserForAuth } from '../types/user';\nimport { BehaviorSubject, Subscription, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService implements OnDestroy {\n\n  private user$$ = new BehaviorSubject<UserForAuth | undefined>(undefined);\n  private user$ = this.user$$.asObservable();\n\n  user: UserForAuth | undefined;\n  USER_KEY = '[user]';\n\n  userSubscription: Subscription;\n\n  get isLogged(): boolean {\n    return !!this.user;\n  }\n  private apiUrl = 'http://localhost:3030'\n  constructor(private http: HttpClient) { }\n\n  register(\n    username: string,\n    email: string,\n    password: string,\n    rePassword: string\n  ) {\n    //debugger\n    //const api = `http://localhost:3000`\n    return this.http\n      .post<UserForAuth>(`${this.apiUrl}/users/register`, {\n        username,\n        email,\n        password,\n        \n      })\n\n      ;\n  }\n\n  login (username: string, password: string) {\n    return this.http\n    .post<UserForAuth>(`${this.apiUrl}/users/register`, {\n      username,\n      password,\n      \n    })\n  }\n  logout() {\n    return this.http\n      .post(`${this.apiUrl}/users/logout`, {})\n  }\n\n  ngOnDestroy(): void {\n    this.userSubscription.unsubscribe();\n  }\n}\n"],"mappings":"AAGA,SAASA,eAAe,QAA2B,MAAM;;;AAKzD,OAAM,MAAOC,WAAW;EAUtB,IAAIC,QAAQA,CAAA;IACV,OAAO,CAAC,CAAC,IAAI,CAACC,IAAI;EACpB;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAZhB,KAAAC,MAAM,GAAG,IAAIN,eAAe,CAA0BO,SAAS,CAAC;IAChE,KAAAC,KAAK,GAAG,IAAI,CAACF,MAAM,CAACG,YAAY,EAAE;IAG1C,KAAAC,QAAQ,GAAG,QAAQ;IAOX,KAAAC,MAAM,GAAG,uBAAuB;EACA;EAExCC,QAAQA,CACNC,QAAgB,EAChBC,KAAa,EACbC,QAAgB,EAChBC,UAAkB;IAElB;IACA;IACA,OAAO,IAAI,CAACX,IAAI,CACbY,IAAI,CAAc,GAAG,IAAI,CAACN,MAAM,iBAAiB,EAAE;MAClDE,QAAQ;MACRC,KAAK;MACLC;KAED,CAAC;EAGN;EAEAG,KAAKA,CAAEL,QAAgB,EAAEE,QAAgB;IACvC,OAAO,IAAI,CAACV,IAAI,CACfY,IAAI,CAAc,GAAG,IAAI,CAACN,MAAM,iBAAiB,EAAE;MAClDE,QAAQ;MACRE;KAED,CAAC;EACJ;EACAI,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACd,IAAI,CACbY,IAAI,CAAC,GAAG,IAAI,CAACN,MAAM,eAAe,EAAE,EAAE,CAAC;EAC5C;EAEAS,WAAWA,CAAA;IACT,IAAI,CAACC,gBAAgB,CAACC,WAAW,EAAE;EACrC;EAAC,QAAAC,CAAA,G;qBAlDUtB,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX3B,WAAW;IAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}